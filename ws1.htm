<!doctype html>
<html>
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=1">
        <title>{{.Game.Name}}</title>

        <!-- IE Specific to remove tap highlight -->
        <meta name="msapplication-tap-highlight" content="no">

        <style>
            html, body {
                width: 100%;
                margin: 0;
                padding: 0;
            }

            body {
                background-color: {{.Game.BGColour}};
                font-family: 'Roboto', sans-serif;
            }
            button {
                width: 150px; height: 60px;
            }
        </style>

        <script>
            var id = null;
            var ws_socket = new WebSocket("ws://{{.Server.Host}}:{{.Server.Port}}/json");

            var isBot = ("{{.Game.Bot}}" == "Y");

            var scoreEle = null;
            var hasRemovedStart = false;

            var GAMESTATE = {};
            var CANVAS_SIZE = {{.Game.CanvasSize}};
            var BOARD_SIZE = {{.Game.BoardSize}};
            var BLOCK_SIZE = CANVAS_SIZE / BOARD_SIZE;

            var dir = 0;

            document.addEventListener("DOMContentLoaded", function(event) {
                scoreEle = document.getElementById("score");

                if (isBot || !isMobileDevice()) {
                    document.getElementById("navButtons").style.display = "none";
                }
                if (isBot) {
                    document.getElementById("start").style.display = "none"; 
                }

                document.getElementById("start").addEventListener("click", function(e) {
                    startgame();
                    e.target.style.display = "none";
                    hasRemovedStart = true;
                });

                // Add touch/mouse handlers for dirs
                var leftKey  = document.getElementById("left");
                var upKey    = document.getElementById("up");
                var rightKey = document.getElementById("right");
                var downKey  = document.getElementById("down");

                leftKey.addEventListener("mousedown", function() {
                    if (dir != kb.DIR.RIGHT) { dir = kb.DIR.LEFT };
                });
                leftKey.addEventListener("touchstart", function() {
                    if (dir != kb.DIR.RIGHT) { dir = kb.DIR.LEFT };
                });

                upKey.addEventListener("mousedown", function() {
                    if (dir != kb.DIR.DOWN) { dir = kb.DIR.UP };
                });
                upKey.addEventListener("touchstart", function() {
                    if (dir != kb.DIR.DOWN) { dir = kb.DIR.UP };
                });

                rightKey.addEventListener("mousedown", function() {
                    if (dir != kb.DIR.LEFT) { dir = kb.DIR.RIGHT };
                });
                rightKey.addEventListener("touchstart", function() {
                    if (dir != kb.DIR.LEFT) { dir = kb.DIR.RIGHT };
                });

                downKey.addEventListener("mousedown", function() {
                    if (dir != kb.DIR.UP) { dir = kb.DIR.DOWN };
                });
                downKey.addEventListener("touchstart", function() {
                    if (dir != kb.DIR.UP) { dir = kb.DIR.DOWN };
                });
            });

            var Keyboarder = function() {
                var keyState = {};

                window.addEventListener("keydown", function(e) {
                    keyState[e.keyCode] = true;

                    // Keyboard direction control but not allowed to reverse into yourself
                    if ((e.keyCode == kb.KEYS.LEFT) && dir != kb.DIR.RIGHT) {
                        dir = kb.DIR.LEFT;
                    } else if ((e.keyCode == kb.KEYS.RIGHT) && dir != kb.DIR.LEFT) {
                        dir = kb.DIR.RIGHT;
                    } else if ((e.keyCode == kb.KEYS.UP) && dir != kb.DIR.DOWN) {
                        dir = kb.DIR.UP;
                    } else if ((e.keyCode == kb.KEYS.DOWN) && dir != kb.DIR.UP) {
                        dir = kb.DIR.DOWN;
                    }
                });

                window.addEventListener("keyup", function(e) {
                    keyState[e.keyCode] = false;
                });

                this.isDown = function(keyCode) {
                    return keyState[keyCode] === true;
                };

                this.KEYS = { LEFT: 37, RIGHT: 39, UP: 38, DOWN: 40 };
                this.DIR = { UP: 0, RIGHT: 1, DOWN: 2, LEFT: 3 };
            };

            var kb = new Keyboarder();

            ws_socket.onopen = function(event) {
                addsnake();
            };
            ws_socket.onmessage = function(event) {
                // console.log(event.data);
                var v = JSON.parse(event.data);
                if (id == null && v.type == "echo") {
                    id = v.payload;
                    console.log("My Snake ID is: " + id);

                } else if (id != null && v.type == "broadcast") {
                    var p = JSON.parse(v.payload);

                    // console.log("Received broadcast payload from server")
                    GAMESTATE = p.payload;
                    drawGame();

                    if (GAMESTATE.isrunning) {
                        if (!hasRemovedStart) {
                            // Make sure start button is removed once games has commenced
                            document.getElementById("start").style.display = "none";
                            hasRemovedStart = true;
                        }

                        var s = GAMESTATE.snakes[id];

                        // Access snake
                        if (s.state == 2) {
                            console.log("This snake is DEAD!");
                            return;
                        }

                        var b = s.body;
                        var h = b[0];

                        // Update score
                        scoreEle.innerHTML = "Score: " + b.length;

                        if (isBot) {
                            // Work out how to get to nearest food
                            dir = getBotMove(h, dir, p.payload.food);
                        }

                        var nh = getNewHead(h, dir);

                        b.unshift(nh);
                        s.body = b;

                        // Send new position to server
                        update(id, s);

                    } else if (hasRemovedStart) {
                        // Game was started and now it has ended.  Update status and show "reload" link
                        alert("Game has ended.  Reload to start a new game!");

                        // TODO, work out if this snake ID has won (calc score of all snakes)
                    }
                }
            };

            function getNewHead(head, dir) {
                var nh = { x: head.x, y: head.y };
                // Allow wrap when you go over the edge
                if (dir == kb.DIR.UP) {
                    nh.y = wrapMove(nh.y-1);

                } else if (dir == kb.DIR.RIGHT) {
                    nh.x = wrapMove(nh.x+1);

                } else if (dir == kb.DIR.DOWN) {
                    nh.y = wrapMove(nh.y+1);

                } else {
                    nh.x = wrapMove(nh.x-1);
                }
                return nh;
            }

            function wrapMove(p) {
                return ((p + BOARD_SIZE) % BOARD_SIZE);
            }
            function getBotMove(head, dir, food) {
                var newDir = dir;

                // Find nearest food
                var nf = { x: 10000, y: 10000 }; // Start with pretend food very far away
                var nfDist = Math.abs(head.x - nf.x) + Math.abs(head.y - nf.y);

                food.forEach(function(block) {
                    var tDist = Math.abs(head.x - block.x) + Math.abs(head.y - block.y);
                    if (tDist < nfDist) {
                        nfDist = tDist;
                        nf = block;
                    }
                });

                // Now work out how to get there.
                var dx = nf.x - head.x;
                var dy = nf.y - head.y;

                if (dx != 0) {
                    if (dir == kb.DIR.UP || dir == kb.DIR.DOWN) {
                        newDir = (dx < 0) ? kb.DIR.LEFT : kb.DIR.RIGHT;

                    } else if (dir == kb.DIR.RIGHT) {
                        if (dx > 0) {
                            newDir = kb.DIR.RIGHT;
                        } else {
                            newDir = (dy < 0) ? kb.DIR.UP : kb.DIR.DOWN;
                        }

                    } else if (dir == kb.DIR.LEFT) {
                        if (dx < 0) {
                            newDir = kb.DIR.LEFT;
                        } else {
                            newDir = (dy < 0) ? kb.DIR.UP : kb.DIR.DOWN;
                        }
                    }
                } else {
                    if (dir == kb.DIR.UP) {
                        newDir = (dy < 0) ? kb.DIR.UP : kb.DIR.LEFT;

                    } else if (dir == kb.DIR.DOWN) {
                        newDir = (dy > 0) ? kb.DIR.DOWN : kb.DIR.RIGHT;

                    } else {
                        newDir = (dy < 0) ? kb.DIR.UP : kb.DIR.DOWN;
                    }
                }

                return checkNewDir(head, dir, newDir);
            }

            function checkNewDir(head, dir, newDir) {
                // Check where new head is going to be.
                var nh = getNewHead(head, newDir);
                var count = 4;
                var change = 0;

                while (!isClear(nh) && count--) {
                    // New head is already taken.  Change direction (+- 90 degrees)
                    change = (Math.random() > 0.5) ? 1 : -1;
                    newDir = (newDir + change) % 4;
                    nh = getNewHead(head, newDir);
                }
                return newDir;
            }

            function isClear(pos) {
                // Check if pos is currently unoccupied
                for (var sid in GAMESTATE.snakes) {
                    if (!GAMESTATE.snakes[sid].body.every( block => (block.x != pos.x || block.y != pos.y) )) {
                        return false;
                    }
                }
                return true;
            }

            function drawGame() {
                var screen = document.getElementById("screen").getContext("2d");

                // Draw the board background over the top of everything
                screen.fillStyle = "{{.Game.BoardColour}}";
                screen.fillRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);

                // Draw all the snakes
                for (var sid in GAMESTATE.snakes) {
                    var snakeColour = (sid == id) ? "{{.Game.SnakeColour1}}" : "{{.Game.SnakeColour2}}";
                    GAMESTATE.snakes[sid].body.forEach(function(block, i) {
                        screen.fillStyle = (i == 0) ? "black" : snakeColour;
                        screen.fillRect(block.x * BLOCK_SIZE, block.y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
                    });
                }

                // Draw all the foods
                if (GAMESTATE.food) {
                    screen.fillStyle = "{{.Game.FoodColour}}";
                    GAMESTATE.food.forEach(function(block) {
                        screen.fillRect(block.x * BLOCK_SIZE, block.y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
                    });
                }

            }

            function send(data) {
                ws_socket.send(JSON.stringify(data));
            }
            function update(id, s) {
                var data = {
                    type: "updatesnake",
                    id: id,
                    s: s
                };
                send(data);
            }
            function addsnake() {
                var data = {
                    type: "addsnake"
                };
                send(data);
            }
            function startgame() {
                var data = {
                    type: "startgame"
                };
                send(data);
            }

            function isMobileDevice() {
                return (typeof window.orientation !== "undefined") || (navigator.userAgent.indexOf('IEMobile') !== -1);
            };
        </script>
    </head>

    <body>
        <h1>{{.Game.Name}} <span id="score"></span></h1>
        <canvas id="screen" width="{{.Game.CanvasSize}}" height="{{.Game.CanvasSize}}"></canvas>
        <button id="start">Start</button>
        <br />
        <div id="navButtons" style="text-align:center;width:100%;">
            <button id="up">Up</button>
            <br /><br />
            <button id="left">Left</button> <button id="right">Right</button>
            <br /><br />
            <button id="down">Down</button>
        </div>
    </body>
</html>
